/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Janelas;

import DAO.CompraDAO;
import DAO.MedCompradosDAO;
import DAO.MedicamentoDAO;
import Model.MedCompradosTableModel;
import Objetos.Compra;
import Objetos.MedComprados;
import Objetos.Medicamento;
import java.awt.Cursor;
import java.awt.Font;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;

/**
 *
 * @author user_acronus
 */
public final class JanelaMedComprados extends javax.swing.JFrame {
    
    MedicamentoDAO medDao = new MedicamentoDAO();
    CompraDAO compDao = new CompraDAO();
    
    MedCompradosTableModel model = new MedCompradosTableModel();
    Compra comp = new Compra();
    
    int clique = -1;
    
    List<Medicamento> medList = medDao.read();

    /**
     * Creates new form JanelaMedComprados
     */
    public JanelaMedComprados() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        for (int i = 0; i < medList.size(); i++) {
            if (medList.get(i).getSituacaomed() == 1) {
                MedComboBox.addItem(String.valueOf((medList.get(i).getCodmedicamento())) + " - " + 
                    medList.get(i).getNomemedicamento() + " (" + medList.get(i).getQuantidadeestoque() + " unidades)" );
            } else if (medList.get(i).getSituacaomed() == 0) {
                MedComboBox.addItem(String.valueOf("INATIVADO (" + (medList.get(i).getCodmedicamento())) + " - " + 
                    medList.get(i).getNomemedicamento() + " [" + medList.get(i).getQuantidadeestoque() + " unidades])" );
            }
        }
        
        caixaValorTotal.setVisible(false);
        caixaInsValorTotal.setVisible(false);
        
        TabMedComp.setModel(model);
        formatar();
    }
    
    public JanelaMedComprados(Compra compEfetuada, String botao) {
        initComponents();
        this.setLocationRelativeTo(null);
        
        for (int i = 0; i < medList.size(); i++) {
            if (medList.get(i).getSituacaomed() == 1) {
                MedComboBox.addItem(String.valueOf((medList.get(i).getCodmedicamento())) + " - " + 
                    medList.get(i).getNomemedicamento() + " (" + medList.get(i).getQuantidadeestoque() + " unidades)" );
            } else if (medList.get(i).getSituacaomed() == 0) {
                MedComboBox.addItem(String.valueOf("INATIVADO (" + (medList.get(i).getCodmedicamento())) + " - " + 
                    medList.get(i).getNomemedicamento() + " [" + medList.get(i).getQuantidadeestoque() + " unidades])" );
            }
        }
        
        String botaoPress = "Avançar";
        
        if (botaoPress.equals(botao)) {
            caixaTitulo.setText("ADICIONAR ITENS (COMPRA)");
        } else {
            caixaTitulo.setText("CONSULTAR ITENS - CÓDIGO COMPRA: " + compEfetuada.getCodCompra());
            model.recarregaTabelaPesq(String.valueOf(compEfetuada.getCodCompra()));
            botaoCadastrarCompra.setText("Atualizar Itens");
        }
        
        caixaValorTotal.setVisible(false);
        caixaInsValorTotal.setVisible(false);
        
        TabMedComp.setModel(model);
        
        comp.setDataCompra(compEfetuada.getDataCompra());
        comp.setDataEntregaCompra(compEfetuada.getDataEntregaCompra());
        comp.setNumeroNFCompra(compEfetuada.getNumeroNFCompra());
        comp.setFormaPagamentoCompra(compEfetuada.getFormaPagamentoCompra());
        comp.setCodFornecedor(compEfetuada.getCodFornecedor());
        comp.setCodCompra(compEfetuada.getCodCompra());
        
        caixaInsData.setText(desconverterData(comp.getDataCompra()));
        formatar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botaoConsultarPreco = new javax.swing.JButton();
        caixaData = new javax.swing.JLabel();
        caixaTitulo = new javax.swing.JLabel();
        caixaValorUnMed = new javax.swing.JLabel();
        caixaInsValorUnMed = new javax.swing.JTextField();
        caixaQntdMed = new javax.swing.JLabel();
        caixaInsQntdMed = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        MedComboBox = new javax.swing.JComboBox<>();
        botaoAddItem = new javax.swing.JButton();
        botaoRemItem = new javax.swing.JButton();
        botaoAltItem = new javax.swing.JButton();
        botaoCadastrarCompra = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabMedComp = new javax.swing.JTable();
        caixaInsData = new javax.swing.JLabel();
        caixaValorTotal = new javax.swing.JLabel();
        caixaInsValorTotal = new javax.swing.JLabel();
        caixaValComp = new javax.swing.JLabel();
        caixaInsValComp = new javax.swing.JTextField();
        botaoVoltar = new javax.swing.JLabel();

        botaoConsultarPreco.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        botaoConsultarPreco.setText("Consultar preço");
        botaoConsultarPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoConsultarPrecoActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        caixaData.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        caixaData.setText("Data da compra");

        caixaTitulo.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        caixaTitulo.setText("ADICIONAR ITENS (COMPRA)");

        caixaValorUnMed.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        caixaValorUnMed.setText("Valor unitário");

        caixaInsValorUnMed.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        caixaInsValorUnMed.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                caixaInsValorUnMedKeyReleased(evt);
            }
        });

        caixaQntdMed.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        caixaQntdMed.setText("Quantidade");

        caixaInsQntdMed.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        caixaInsQntdMed.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                caixaInsQntdMedKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel1.setText("Medicamento");

        MedComboBox.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        MedComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MedComboBoxMouseClicked(evt);
            }
        });
        MedComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MedComboBoxActionPerformed(evt);
            }
        });

        botaoAddItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/Adicionar.png"))); // NOI18N
        botaoAddItem.setToolTipText("");
        botaoAddItem.setMaximumSize(new java.awt.Dimension(35, 35));
        botaoAddItem.setMinimumSize(new java.awt.Dimension(35, 35));
        botaoAddItem.setPreferredSize(new java.awt.Dimension(35, 35));
        botaoAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAddItemActionPerformed(evt);
            }
        });

        botaoRemItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/Remover.png"))); // NOI18N
        botaoRemItem.setMaximumSize(new java.awt.Dimension(35, 35));
        botaoRemItem.setMinimumSize(new java.awt.Dimension(35, 35));
        botaoRemItem.setPreferredSize(new java.awt.Dimension(35, 35));
        botaoRemItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRemItemActionPerformed(evt);
            }
        });

        botaoAltItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/Alterar.png"))); // NOI18N
        botaoAltItem.setMaximumSize(new java.awt.Dimension(35, 35));
        botaoAltItem.setMinimumSize(new java.awt.Dimension(35, 35));
        botaoAltItem.setPreferredSize(new java.awt.Dimension(35, 35));
        botaoAltItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAltItemActionPerformed(evt);
            }
        });

        botaoCadastrarCompra.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        botaoCadastrarCompra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/FinalizarCompVend.png"))); // NOI18N
        botaoCadastrarCompra.setText(" Finalizar Compra");
        botaoCadastrarCompra.setMaximumSize(new java.awt.Dimension(146, 35));
        botaoCadastrarCompra.setMinimumSize(new java.awt.Dimension(146, 35));
        botaoCadastrarCompra.setPreferredSize(new java.awt.Dimension(146, 35));
        botaoCadastrarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCadastrarCompraActionPerformed(evt);
            }
        });

        TabMedComp.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        TabMedComp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TabMedComp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMedCompMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TabMedComp);

        caixaInsData.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        caixaInsData.setText("inserirData");
        caixaInsData.setPreferredSize(new java.awt.Dimension(62, 16));

        caixaValorTotal.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        caixaValorTotal.setText("Valor total da compra - R$");

        caixaInsValorTotal.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        caixaInsValorTotal.setText("Valor total:");

        caixaValComp.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        caixaValComp.setText("Valor total");

        caixaInsValComp.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        botaoVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/Voltar.png"))); // NOI18N
        botaoVoltar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoVoltarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                botaoVoltarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                botaoVoltarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botaoCadastrarCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(caixaValorTotal)
                        .addGap(3, 3, 3)
                        .addComponent(caixaInsValorTotal))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botaoAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(botaoRemItem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(botaoAltItem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botaoVoltar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(caixaTitulo))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(caixaData)
                            .addComponent(caixaValorUnMed)
                            .addComponent(caixaValComp)
                            .addComponent(caixaQntdMed))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(caixaInsData, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(caixaInsValorUnMed)
                                    .addComponent(MedComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(caixaInsQntdMed)
                                    .addComponent(caixaInsValComp, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 854, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(caixaTitulo)
                    .addComponent(botaoVoltar))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(caixaData)
                        .addComponent(caixaInsData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(caixaInsValorUnMed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(caixaValorUnMed))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(caixaInsQntdMed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(caixaQntdMed))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(caixaInsValComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(caixaValComp))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botaoAddItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botaoRemItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botaoAltItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botaoCadastrarCompra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(caixaValorTotal)
                        .addComponent(caixaInsValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MedComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MedComboBoxMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_MedComboBoxMouseClicked

    private void botaoAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAddItemActionPerformed
        // TODO add your handling code here:
        int addItem = JOptionPane.showConfirmDialog(null, "Inserir item em compra?","CONFIRMAR",JOptionPane.YES_NO_OPTION);
        
        if (MedComboBox.getSelectedIndex() != -1 && medList.get(MedComboBox.getSelectedIndex()).getSituacaomed() == 1 && addItem == 0) {
            boolean medCadastrado = false;
        
            if (TabMedComp.getRowCount() == 0) {
                medCadastrado = false;
            } else {
                for (int i = 0; i < TabMedComp.getRowCount(); i++) {

                int codmed = medList.get(MedComboBox.getSelectedIndex()).getCodmedicamento();
                int codMedAdd = Integer.parseInt(String.valueOf(TabMedComp.getValueAt(i, 4)));

                    if (codmed == codMedAdd) {
                        medCadastrado = true;
                    }
                }
            }

            String botaoPress = botaoCadastrarCompra.getText();

            if (medCadastrado) {
                JOptionPane.showMessageDialog(null, "Medicamento já cadastrado");
            } else {
                addItens(botaoPress);
            }
        } else if (medList.get(MedComboBox.getSelectedIndex()).getSituacaomed() == 0) {
            JOptionPane.showMessageDialog(null, "Ative o cadastro do medicamento em sua tela de cadastro",
                    "MEDICAMENTO INATIVADO!",NORMAL);
        } else if (addItem == 1){
            ocultar();
        }
        
    }//GEN-LAST:event_botaoAddItemActionPerformed

    private void botaoCadastrarCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCadastrarCompraActionPerformed
        // TODO add your handling code here:
        
        String botaoPress = botaoCadastrarCompra.getText();
        
        if (botaoPress.equals(" Finalizar Compra")) {
            List<MedComprados> medComprados = new ArrayList<>();

            for (int i = 0; i < TabMedComp.getRowCount(); i++) {
                medComprados.add(i, addItensTab(i));
            }

            comp.setValorNFCompra(Double.parseDouble(caixaInsValorTotal.getText()));

            int cadastro = compDao.criar(comp);

            if (cadastro != 0) {
                if (compDao.addItensComp(comp, medComprados)) {
                    this.dispose();
                    ocultar();
                } else {
                    compDao.deletar(comp);
                }
            }
        } else if (botaoPress.equals("Atualizar Itens")){
            this.dispose();
        }
    }//GEN-LAST:event_botaoCadastrarCompraActionPerformed

    public MedComprados addItensTab(int i){
        MedComprados medComp = new MedComprados();
        
        medComp.setDatacompra(converterData(String.valueOf(TabMedComp.getValueAt(i, 0))));
        medComp.setValorUnMed(Double.valueOf(String.valueOf(TabMedComp.getValueAt(i, 1))));
        medComp.setValorComp(Double.parseDouble(String.valueOf(TabMedComp.getValueAt(i, 2))));
        medComp.setQuantidademed(Integer.parseInt(String.valueOf(TabMedComp.getValueAt(i, 3))));
        medComp.setCodmedicamento(Integer.parseInt(String.valueOf(TabMedComp.getValueAt(i, 4))));
        
        return medComp;
    }
    
    private void caixaInsQntdMedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_caixaInsQntdMedKeyReleased
        // TODO add your handling code here:
        if (!"".equals(caixaInsQntdMed.getText()) && !"".equals(caixaInsValorUnMed.getText())) {
            double somatoria = Double.parseDouble(caixaInsQntdMed.getText()) * Double.parseDouble(caixaInsValorUnMed.getText());
            caixaInsValComp.setText(String.valueOf(somatoria));
        } else {
            caixaInsValComp.setText("");
        }
    }//GEN-LAST:event_caixaInsQntdMedKeyReleased

    public void addItens(String botaoPress){
        MedComprados medComp = new MedComprados();
        MedCompradosDAO medCompDao = new MedCompradosDAO();
        
        medComp.setDatacompra(converterData(caixaInsData.getText()));
        medComp.setValorUnMed(Double.valueOf(caixaInsValorUnMed.getText()));
        medComp.setQuantidademed(Integer.parseInt(caixaInsQntdMed.getText()));
        medComp.setCodmedicamento(medList.get(MedComboBox.getSelectedIndex()).getCodmedicamento());
        medComp.setValorComp(Double.parseDouble(caixaInsValComp.getText()));

        if (botaoPress.equals(" Finalizar Compra")) {
            model.addLinha(medComp);
            calcularTotal();
        } else {
            boolean cadastro = medCompDao.criar(medComp, comp);
            model.recarregaTabelaPesq(String.valueOf(comp.getCodCompra()));
            
            if (cadastro) {
                double valorTotal = calcularTotal();
                comp.setValorNFCompra(valorTotal);
                
                compDao.atualizarValor(comp);
            }
        }
    }
    
    private void caixaInsValorUnMedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_caixaInsValorUnMedKeyReleased
        // TODO add your handling code here:
        if (!"".equals(caixaInsQntdMed.getText()) && !"".equals(caixaInsValorUnMed.getText())) {
            double somatoria = Double.parseDouble(caixaInsQntdMed.getText()) * Double.parseDouble(caixaInsValorUnMed.getText());
            caixaInsValComp.setText(String.valueOf(somatoria));
        } else {
            caixaInsValComp.setText("");
        }
    }//GEN-LAST:event_caixaInsValorUnMedKeyReleased

    private void TabMedCompMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMedCompMouseClicked
        // TODO add your handling code here:
        if (TabMedComp.getSelectedRow() != -1 && TabMedComp.getSelectedRow() != clique) {
            clique = TabMedComp.getSelectedRow();
            MedComprados medComp = model.pegaDadosLinha(TabMedComp.getSelectedRow());
        
            caixaInsValorUnMed.setText(String.valueOf(medComp.getValorUnMed()));
            caixaInsQntdMed.setText(String.valueOf(medComp.getQuantidademed()));
            caixaInsValComp.setText(String.valueOf(medComp.getValorComp()));

            for (int i = 0; i < medList.size(); i++) {
                if (medList.get(i).getCodmedicamento()== medComp.getCodmedicamento()) {
                    MedComboBox.setSelectedIndex(i);
                }
            }
        } else {
            ocultar();
        }
    }//GEN-LAST:event_TabMedCompMouseClicked

    private void botaoAltItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAltItemActionPerformed
        // TODO add your handling code here:
        boolean medCadastrado = false;
        
        int alterarItem = JOptionPane.showConfirmDialog(null, "Alterar item?","CONFIRMAR",JOptionPane.YES_NO_OPTION);
        
        if (alterarItem == 0) {
            if (TabMedComp.getSelectedRow() != -1) {
                for (int i = 0; i < TabMedComp.getRowCount(); i++) {
                    int codmed = medList.get(MedComboBox.getSelectedIndex()).getCodmedicamento();
                    int codMedAdd = Integer.parseInt(String.valueOf(TabMedComp.getValueAt(i, 4)));
                    int codMedSel = Integer.parseInt(String.valueOf(TabMedComp.getValueAt(TabMedComp.getSelectedRow(), 4)));

                    if (codmed == codMedAdd) {
                        medCadastrado = true;
                        if (codmed == codMedSel) {
                            medCadastrado = false;
                        }
                    }
                }
            }

            String botaoPress = botaoCadastrarCompra.getText();

            if (medCadastrado) {
                JOptionPane.showMessageDialog(null, "Medicamento já cadastrado");
            } else {
                attItens(botaoPress);
                calcularTotal();
                ocultar();
            }
        }else if (alterarItem == 1) {
            ocultar();
        }        
    }//GEN-LAST:event_botaoAltItemActionPerformed

    private void botaoRemItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRemItemActionPerformed
        // TODO add your handling code here:
        int removerItem = JOptionPane.showConfirmDialog(null, "Remover item?","CONFIRMAR",JOptionPane.YES_NO_OPTION);
        
        if (TabMedComp.getSelectedRow() != -1) {
            if (removerItem == 0) {
                String botaoPress = botaoCadastrarCompra.getText();

                MedCompradosDAO medCompDao = new MedCompradosDAO();
                MedComprados medComp = new MedComprados();

                if (botaoPress.equals(" Finalizar Compra")) {
                    if (TabMedComp.getSelectedRow() != -1) {
                    model.removeLinha(TabMedComp.getSelectedRow());
                    calcularTotal();
                    }
                } else {
                    if (TabMedComp.getSelectedRow() != -1) {

                        String codMed = String.valueOf(TabMedComp.getValueAt(TabMedComp.getSelectedRow(), 4));

                        int estAnt = Integer.parseInt(String.valueOf(TabMedComp.getValueAt(TabMedComp.getSelectedRow(), 3)));
                        int estAtu = medDao.pesquisarCod(String.valueOf(codMed)).get(0).getQuantidadeestoque();

                        if (estAnt <= estAtu) {

                            medComp.setCodmedicamento(Integer.parseInt(String.valueOf(TabMedComp.getValueAt(TabMedComp.getSelectedRow(), 4))));

                            boolean cadastro = medCompDao.remover(medComp, comp);
                            model.recarregaTabelaPesq(String.valueOf(comp.getCodCompra()));

                            if (cadastro) {
                                double valorTotal = calcularTotal();
                                comp.setValorNFCompra(valorTotal);

                                compDao.atualizarValor(comp);
                                ocultar();
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Estoque insuficiente para deletar compra!");
                        }
                    }
                }
            } else if (removerItem == 1) {
                ocultar();
            }
        }
        
        
        
    }//GEN-LAST:event_botaoRemItemActionPerformed

    private void botaoConsultarPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoConsultarPrecoActionPerformed
        // TODO add your handling code here:
        double valor = medDao.consultarPreco(((medList.get(MedComboBox.getSelectedIndex()).getCodmedicamento())));
        caixaInsValorUnMed.setText("" + valor);
    }//GEN-LAST:event_botaoConsultarPrecoActionPerformed

    private void MedComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MedComboBoxActionPerformed
        // TODO add your handling code here:
        if (MedComboBox.getSelectedIndex() != -1) {
            caixaInsValorUnMed.setText(String.valueOf(medList.get(MedComboBox.getSelectedIndex()).getValorcusto()));
        }
    }//GEN-LAST:event_MedComboBoxActionPerformed

    private void botaoVoltarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoVoltarMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_botaoVoltarMouseClicked

    private void botaoVoltarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoVoltarMouseEntered
        // TODO add your handling code here:
        this.setCursor(Cursor.HAND_CURSOR);
        botaoVoltar.setToolTipText("Voltar");
    }//GEN-LAST:event_botaoVoltarMouseEntered

    private void botaoVoltarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoVoltarMouseExited
        // TODO add your handling code here:
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_botaoVoltarMouseExited

    
    public void formatar(){
        JTableHeader tituloTabela = TabMedComp.getTableHeader();
        tituloTabela.setFont(new Font("century gothic", Font.BOLD, 12));
        
        DefaultTableCellRenderer centralizar = (DefaultTableCellRenderer)
                tituloTabela.getDefaultRenderer();
        centralizar.setHorizontalAlignment(JLabel.CENTER);
        centralizar.setVerticalAlignment(JLabel.CENTER);
        
        UIManager.put("OptionPane.cancelButtonText", "Cancelar"); 
        UIManager.put("OptionPane.noButtonText", "Não"); 
        UIManager.put("OptionPane.yesButtonText", "Sim");
    }
    
    public void ocultar(){
        TabMedComp.clearSelection();
        clique = -1;
    }
    
    public double calcularTotal(){
        List<MedComprados> medComprados = new ArrayList<>();
        MedComprados medComp = new MedComprados();
        double valor = 0.0;
        double valorTotal = 0.0;
        
        for (int i = 0; i < TabMedComp.getRowCount(); i++) {
            medComp.setDatacompra(String.valueOf(TabMedComp.getValueAt(i, 0)));
            medComp.setValorUnMed(Double.parseDouble(String.valueOf(TabMedComp.getValueAt(i, 1))));
            medComp.setValorComp(Double.parseDouble(String.valueOf(TabMedComp.getValueAt(i, 2))));
            medComp.setQuantidademed(Integer.parseInt(String.valueOf(TabMedComp.getValueAt(i, 3))));
            medComp.setCodmedicamento(Integer.parseInt(String.valueOf(TabMedComp.getValueAt(i, 4))));
            medComprados.add(medComp);
            
            valor = medComprados.get(i).getValorComp();
            valorTotal = (valorTotal + valor);
        }
        
        if (valorTotal != 0.0) {
            caixaValorTotal.setVisible(true);
            caixaInsValorTotal.setVisible(true);
            caixaInsValorTotal.setText(String.valueOf(valorTotal));
        } else {
            caixaValorTotal.setVisible(false);
            caixaInsValorTotal.setVisible(false);
        }
        return valorTotal;
    }
    
    public void attItens(String botaoPress){
        if (TabMedComp.getSelectedRow() != -1) {
            if (botaoPress.equals(" Finalizar Compra")) {
                model.setValueAt(caixaInsValorUnMed.getText(), TabMedComp.getSelectedRow(), 1);
                model.setValueAt(caixaInsValComp.getText(), TabMedComp.getSelectedRow(), 2);
                model.setValueAt(caixaInsQntdMed.getText(), TabMedComp.getSelectedRow(), 3);
                model.setValueAt(String.valueOf(medList.get(MedComboBox.getSelectedIndex()).getCodmedicamento()), TabMedComp.getSelectedRow(), 4);
            } else {
                
                int codMedTab = Integer.parseInt(String.valueOf(TabMedComp.getValueAt(TabMedComp.getSelectedRow(), 4)));
                int codMedAtt = medList.get(MedComboBox.getSelectedIndex()).getCodmedicamento();
                
                if (codMedTab == codMedAtt) {
                    
                    MedComprados medComp = new MedComprados();
                    MedCompradosDAO medCompDao = new MedCompradosDAO();
                    
                    medComp.setValorUnMed(Double.valueOf(caixaInsValorUnMed.getText()));
                    medComp.setValorComp(Double.parseDouble(caixaInsValComp.getText()));
                    medComp.setQuantidademed(Integer.parseInt(caixaInsQntdMed.getText()));
                    medComp.setCodmedicamento(medList.get(MedComboBox.getSelectedIndex()).getCodmedicamento());
                    
                    boolean cadastro = calcularDiferença(medComp);
                    
                    if (cadastro) {
                        cadastro = medCompDao.atualizar(medComp, comp);
                        model.recarregaTabelaPesq(String.valueOf(comp.getCodCompra()));
                        
                        if (cadastro) {
                            double valorTotal = calcularTotal();
                            comp.setValorNFCompra(valorTotal);
                            
                            compDao.atualizarValor(comp);
                        }
                    }
                } else if (codMedTab != codMedAtt){
                    MedComprados medComp = new MedComprados();
                    MedComprados medCompAnt = new MedComprados();
                    MedCompradosDAO medCompDao = new MedCompradosDAO();
                    
                    medComp.setDatacompra(converterData(caixaInsData.getText()));
                    medComp.setValorUnMed(Double.valueOf(caixaInsValorUnMed.getText()));
                    medComp.setValorComp(Double.parseDouble(caixaInsValComp.getText()));
                    medComp.setQuantidademed(Integer.parseInt(caixaInsQntdMed.getText()));
                    medComp.setCodmedicamento(medList.get(MedComboBox.getSelectedIndex()).getCodmedicamento());
                    
                    medCompAnt.setCodmedicamento(codMedTab);
                    boolean cadastro = medCompDao.remover(medCompAnt, comp);
                    
                    if (cadastro) {
                        cadastro = medCompDao.criar(medComp, comp);
                        model.recarregaTabelaPesq(String.valueOf(comp.getCodCompra()));
                        
                        if (cadastro) {
                            double valorTotal = calcularTotal();
                            comp.setValorNFCompra(valorTotal);
                            
                            compDao.atualizarValor(comp);
                        }
                    }
                }
            }
        }
    }
    
    public boolean calcularDiferença(MedComprados medComp){
        boolean cadastro = false;
        
        if (TabMedComp.getSelectedRow() != -1) {
            MedicamentoDAO medDao = new MedicamentoDAO();
            MedCompradosDAO medCompDao = new MedCompradosDAO();
            
            int antAtt = Integer.parseInt(String.valueOf(TabMedComp.getValueAt(TabMedComp.getSelectedRow(), 3)));
            int depAtt = medComp.getQuantidademed();
            int estMed = medDao.pesquisarCod(String.valueOf(medComp.getCodmedicamento())).get(0).getQuantidadeestoque();
            
            if (antAtt < depAtt) {
                int dif = (depAtt - antAtt);
                cadastro = medCompDao.adicionarEstoque(medComp, dif);
            } else if(antAtt > depAtt){
                int dif = (antAtt - depAtt);
                if (dif <= estMed) {
                    cadastro = medCompDao.removerEstoque(medComp, dif);
                } else {
                    JOptionPane.showMessageDialog(null, "Estoque insuficiente");
                }
            } else {
                cadastro = true;
            }
        }
        return cadastro;
    }
    
    public String converterData(String dataDigitada){
            String dataConvertida = null;
        try {
            SimpleDateFormat in = new SimpleDateFormat("dd/MM/yyyy");
            Date data = in.parse(dataDigitada);
            dataConvertida = String.valueOf(new java.sql.Date(data.getTime()));
        } catch (java.text.ParseException ex) {
            Logger.getLogger(JanelaDrogaria.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dataConvertida;
    }
    
    public String desconverterData(String dataDigitada){
        String dataFormatada = null;
        
        SimpleDateFormat formatoBanco = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat formatoDesejado = new SimpleDateFormat("dd/MM/yyyy");
        
        try {
            Date dataBanco = new Date(formatoBanco.parse(dataDigitada).getTime());
            dataFormatada = formatoDesejado.format(dataBanco);
        } catch (ParseException e) {
        }
        return dataFormatada;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaMedComprados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaMedComprados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaMedComprados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaMedComprados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaMedComprados().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> MedComboBox;
    private javax.swing.JTable TabMedComp;
    private javax.swing.JButton botaoAddItem;
    private javax.swing.JButton botaoAltItem;
    private javax.swing.JButton botaoCadastrarCompra;
    private javax.swing.JButton botaoConsultarPreco;
    private javax.swing.JButton botaoRemItem;
    private javax.swing.JLabel botaoVoltar;
    private javax.swing.JLabel caixaData;
    private javax.swing.JLabel caixaInsData;
    private javax.swing.JTextField caixaInsQntdMed;
    private javax.swing.JTextField caixaInsValComp;
    private javax.swing.JLabel caixaInsValorTotal;
    private javax.swing.JTextField caixaInsValorUnMed;
    private javax.swing.JLabel caixaQntdMed;
    private javax.swing.JLabel caixaTitulo;
    private javax.swing.JLabel caixaValComp;
    private javax.swing.JLabel caixaValorTotal;
    private javax.swing.JLabel caixaValorUnMed;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
